#-------------------------------------------------------------------------------
# Copyright 2012 Pradeep Nambiar,  Pexus LLC
# 
# Source File: src/perfLog_Sample.properties 
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
#Use perfLog.properties in your application EAR file if you wish use
#a different set of properties to suite your application and application
#environment. perfLog.properties is loaded by the application class loader
#If perfLog.properties is not found, then the default perfLogDefault.properties
#is loaded.
#This is the default  perfLogDefault.properties

#Properties can also be fine tuned outside of the application via the
#TunableProperties implementation. Properties marked static will be read
#once and properties marked dynamic will be read at period intervals
#



##################################################
# Properties loaded by PerfLogContextProperties class
##################################################

###### Max Cache Data Size Estimation ############ 
# Maximum data that will be cached in debug and request data 
# context per thread. All log debug data can captured by the application
# logger and held in context during the request execution and cleared 
# when deleting the context before the request leaves the container
# When cache reaches it's maximum size, the oldest data is dropped
# to make room for new data to be cached
#
# A value of 10 KB for each of these buffer would require
#      number of request threads x 20KB of memory
# For Portal, current max thread is set to 50 in production
# So this means 50 x 20KB = 1000KB = 1 MB of max space will be used
# For services the current max thread is set to 250. Assuming another 100
# threads for ORB requests, the max memory overhead would be 
# 350 x 20KB = 7MB
# Tune the above for desired fidelity and usefulness of the cached data
# NOTE: perflog.context.* properties can also be defined in name space
#       as string bindings to cell/persistent/PerfLog/<property name>
#       in WebSphere environment. Properties defined in name space will
#       override the properties in this file
static.perflog.context.maxDebugContextSizeInBytes=10240
static.perflog.context.maxRequestDataContextSizeInBytes=10240

# maximum response time threshold
# if elapsed time exceeds this threshold when
# deleting a context the debug and request data context is printed
# to SystemOut.log
# this property is marked dynamic
dynamic.perflog.context.responseTimeThresholdInMillis=15000

#
# Set this to true, f you want to see the debug and request data context
# printed for each request when the PerfLog context is deleted
# This is useful during development or debugging only
# Do not set this to true in production
dynamic.perflog.context.forceDumpOfDebugContextOnDelete=false


####################################################
# Properties loaded by LoggerProperties class
####################################################

##################################################################
#Logger for internal logging of org.perf.log project
##################################################################
# Logger Implementation - implements org.perf.log.logger.Logger
# This class is the logger  for PerfLog project only and is initialized by
# org.perf.log.logger.LoggerFactory class
# This logger is kept separate from application logger to avoid
# dependency cycle. This logger is also used to dump the debug
# and request data context when response time exceeds the set threshold
# Logger level can be controlled by Log Trace properties in WAS Console for
# class org.perf.log.logger.LoggerImpl with following mapping
# - DEBUG is mapped to FINEST
# - ERROR is mapped to SEVERE
# - INFO is mapped to  INFO
# - WARN is mapped to WARNING
# - TRACE is mapped to FINER

#The following two properties can also be defined as tunable properties
#in WebSphere environment under cell/persistent/PerfLog path
static.logger.loggerImplClass=org.perf.log.logger.LoggerImpl
dynamic.logger.loggerImpl.debugEnabled=false

dynamic.logger.loggerImpl.errorEnabled=true
dynamic.logger.loggerImpl.infoEnabled=true
dynamic.logger.loggerImpl.traceEnabled=false
dynamic.logger.loggerImpl.warnEnabled=true


###############################################################
#Performance Logger definition and related properties
###############################################################

################################################################
#Performance logger implementations that implements
#       org.perf.log.logger.PerfLogger interface.
# Four implementations are provided to log the performance metrics 
# data
################################################################

################################################################
# PerfLogger Implementation 1: Simple Std Out logger
################################################################
#This is a simple logger implementation that writes the performance 
#metrics to the SystemOut.log.

static.logger.perfLoggerImplClass=org.perf.log.logger.PerfLoggerImplStdOut

################################################################
# PerfLogger Implementation 2: Asynchronous Work Manager Thread 
################################################################
#Asynchronous logger implemented using threads within the JVM
#This implementation use threads created by WebSphere Work Manager
#static.logger.perfLoggerImplClass=org.perf.log.logger.PerfLoggerImplWasWmAsyncThread

################################################################
#              PerfLogger Implementation 3 
################################################################
#Asynchronous logger implemented using threads within the JVM
#This implementation use threads created by CommonJ Work Manager
#This is very similar to the WebSphere Work Manager implementation
#Either of them should work in WebSphere environment
#If you have a non-WebSphere environment use this implementation
#as this is J2EE 1.4 compliant 

#static.logger.perfLoggerImplClass=org.perf.log.logger.PerfLoggerImplCommonJAsyncThread

################################################################
#   Common Properties for PerfLogger Implementation 2 & 3 
################################################################
###############################################################
#Following properties for asynchronous thread logger implementations
#These properties are read by 
# PerfLoggerImplAsyncThreadAbstract and AsyncLoggerWorkerThreadAbstract 
# abstract classes
# Properties starting with static. and will be read at init time only
static.logger.asyncThreadLogger.numAsyncLoggerTaskThreads=2

#maximum number of elements in Queue
# total number of Queues will be determined the number of async
# logger task threads. On average a single queue element takes about 1KB
# So setting this value to 1000 and with 2 threads, the maximum space needed
# when the Qs are full will be  2MB. If the enqueue and dequeue rate keeps up
# the memory is released. The queues does not hold the memory.
# 2MB is the maximum held if the queues are full. 
# Note: the space will be required for each application in the JVM
# that uses PerfLog. So if there are 2 EARs in the JVM you will have to
# multiply this size by 2.
dynamic.logger.asyncThreadLogger.maxQSize=1000

#Work Manager JNDI resource name
static.logger.asyncThreadLogger.workManagerResourceName=wm/default

#Following can be set dynamically and can be set in Name Space binding
#this property not used currently, can be used to batch updates in future
dynamic.logger.asyncThreadLogger.minFlushThreshold=1000
#Max time to sleep before checking if there are records to be dequeued
#If there are records the thread does get interrupted
dynamic.logger.asyncThreadLogger.threadSleepTimeInMillis=10000
#time property to print async logger thread activity
dynamic.logger.asyncThreadLogger.printStatTimeIntervalInMillis=600000

#########################################################################
# org.perf.log.logger.FileWriter class properties
#########################################################################
#Specify the directory location where to log the performance logs
#By default the file is created in the perfLogS/<JVM instance name>/ directory relative
#to the JVM's current working directory
#If you want to change the above location specify the absolute directory root path
#e.g. /var/logs/myApplication
#static.logger.FileWriter.logFileRootDir=/tmp
static.logger.FileWriter.logFileRootDir=c:\\tmp
static.logger.FileWriter.logFileMaxSize=4194304
static.logger.FileWriter.logFileNumFilesToKeep=10
#
#property to indicate whether to log to performance records to a file file 
#by asynchronous logger threads
#The file name is - perf-logXX.log 
dynamic.logger.FileWriter.fileWriteEnabled=true

#######################################################################
# org.perf.log.logger.DBWriter class properties
#######################################################################
#property to indicate whether to log to Database by async logger threads
#JNDI definition for JDBC data source is - jdbc/perfDB  which should be defined
#on your J2EE container for this to work 
#Sample DDL files to create the databse for mySQL and DB2 are included 
#in the project
#
dynamic.logger.DBWriter.dbWriteEnabled=true
###############################################################
# End of Common Properties for PerfLogger Implementation 2 & 3
############################################################### 



#########################################################################

################################################################
#  PerfLogger Implementation 4: JMS Logger Implementation 
################################################################
#JMS Queue implementation -  used for logging to a JMS Queue
#This implementation requires the following JMS resources to be defined
#on the put side of queue infrastructure
#
# Queue Connection Factory - jms/perfQCF
# JMS Queue - jms/qPerfLog
#
# A sample MDB (Message Driven Bean) project is provided called PerfLogMDB
# that can dequeue the message and write to a log file and the database
# For the MBD the following resources should be defined
# Activation Spec -  jms/asPerfLog
# Destination Q -    jms/qPerfLog

# You will have to design your queue infrastructure based on the
# scalability requirements of your application
# For most common case the asynchronous logger thread implementation within JVM 
# would work and is quite scalable. But if you have requirement that needs
# the logging to be centralized and sent to a remote infrastructure
# the JMS Queue implementation can be useful
# Uncomment the next line to enable the JMS Queue implementation

#static.logger.perfLoggerImplClass=org.perf.log.logger.PerfLoggerImplJMSQ

################################################################
# Properties for  PerfLogger Implementation 4: JMS JNDI defs etc. 
################################################################
static.perfLoggerImplJMSQ.queueConnectionFactory = jms/perfQCF
static.perfLoggerImplJMSQ.queue = jms/qPerfLog

#Setting the JMS message delivery expiration to 1 hour from these properties
#This is useful to have the message expire if there is a problem
#dequeing the messages to avoid clogging the Queue
#If set to 0, message will not expire 
dynamic.perfLoggerImplJMSQ.messageExpirationTimeInMillis = 3600000

####################################################################



###############################################################
#The following properties control the performance logging
#These apply to all PerfLogger implementations
###############################################################
#The following properties can be changed dynamically 
#to facilitate performance tuning easily
#All properties that can be changed dynamically are suffixed
#with .dynamic

#Enable/Disable all performance logging
dynamic.logger.perfLoggerImpl.logEnabled=true
#Set threshold for elapsed time in milliseconds, 0 means log everything if 
#log is enabled
dynamic.logger.perfLoggerImpl.logThreshold=0

#Enabled/Disable SQL performance logs
dynamic.logger.perfLogSql.Enabled=true
#Set elapsed time threshold for SQL logging
dynamic.logger.perfLogSql.Threshold=0

#indicates if the SQL and timing needs to be cached
#in PerfLog request data context data for diagnosis
dynamic.logger.perfLogSQL.CacheSQLInContext=true
#Specify cache threshold. This property is useful
#when you only wants to cache slow SQLs that exceeds
#a certain threshold. 0 means cache all SQL
#Note: the debug context is a rolling buffer Q
#This property can therefore  help in saving only
#useful data rather than caching everything which could
#and loosing diagnostic data due to memory overflow
dynamic.logger.perfLogSQL.CacheSQLInContext.threshold=0

#Enabled/Disable web service performance logging
dynamic.logger.perfLogWS.Enabled=true
#Set elapsed time threshold for web service logging
dynamic.logger.perfLogWS.Threshold=0
#add SOAP message to PerfLog request data context
#Enable this to see SOAP request and response 
#in PerfLog Context dumps
dynamic.logger.perfLogWS.CacheSOAPMessage=false

#Enable/Disable portlet performance logging
dynamic.logger.perfLogPortlet.Enabled=true
#Set elapsed time threshold for portlet performance logging
dynamic.logger.perfLogPortlet.Threshold=0

#Enable/Disable servlet performance logging
dynamic.logger.perfLogServlet.Enabled=true
#Set elapsed time threshold for servlet performance logging
dynamic.logger.perfLogServlet.Threshold=0

#Enable/Disable struts/portlet bridge performance logging
dynamic.logger.perfLogStruts.Enabled=true
#Set elapsed time threshold for struts performance logging
dynamic.logger.perfLogStruts.Threshold=0

#Log startPerfLogTxn and endPerfLogTxn types
#The above txn types are logged when a request PerfLog context is 
#created and deleted in the first JVM. This is useful 
#when there are multiple PerfLogTxnTypes are generated within
#a single request and also when a request results in multiple
#JVM hops. It can be used to find out if a transaction completed
#successfully without hanging midway
dynamic.logger.logStartEndPerfLogTxn.Enabled=true

###############################################################


###############################################################
# Tunable properties implementation properties
###############################################################
#The following flag indicate if Tunable Property Implementation
#should be used. It is enabled by default
#If enabled one of the Tunable Property implementation should be
#specified, if not specified it will default to using
#NSBTunablePropertiesImpl

static.logger.tunableProperties.enabled=false

#Refresh time in milliseconds for tunable properties that could be
#dynamic or static - used by TunablePropertiesAbstract class
#static properties are loaded only once if defined
#all properties defined as static are prefixed with static
#all properties that will be checked periodically are prefixed dynamic
static.logger.tunableProperties.propertyRefreshInterval=180000


###############################################################
#Name Space Binding Tunable Properties Implementation properties
###############################################################
#Set Tunable Properties Implementation Class
#This class implements TunableProperties and provides an
#implementation to read dynamic or static properties
#dynamic properties will be read periodically
#An abstract implementation that manages a cache and only
#reads the dynamic properties periodically based on propertyRefreshInternval
#is provided in this library and is called CachedTunablePropertieAbstract
#Implementing methods can extend from this.
#WebSphere enables attaching a string name value pair as name space bindings at cell level
#This feature is used to bind the  properties to name space to enable
#changing the properties easily without a code re-deployment
#The implementation checks if the properties are defined
#Properties can be marked as dynamic or static. If the property is marked dynamic
#and it is defined in the name space, the property will be refreshed at a given interval
#This implementation requires the root name of cell persistence name space 
#To specify the property static.logger.perfLoggerImplClass to name space binding
# use the following name space path:  <nameSpaceBindingRoot>/propertyname
#
# e.g. for property logger.perfLoggerImplClass use the following name space path
#
#   cell/persistent/PerfLog/static.logger.perfLoggerImplClass
#
#PerfLog project will first read this file, and if a corresponding property is
#defined in name space binding, it will override with the value bound to name space
#If the requester wants to check this property at regular interval the property will be
#marked as dynamic and will be read from name space at regular intervals
#Uncoment next two lines and comment all other implementation lines for other TunableProperties 
#implementation class. 
#static.logger.tunablePropertiesImplClass=org.perf.log.properties.NSBTunablePropertiesImpl
#static.logger.NSBTunablePropertiesImpl.nameSpaceBindingRoot=cell/persistent/PerfLog



###########################################################################
#URL Resource Tunable Properties Implementation for dynamic properties
#A simple implementation to read properties using a URL
#URL support various scheme e.g. http, file etc.
#For specify a file based URL scheme uses file://path
#On windows use e.g. file://c:/tmp/myPerfLog.properties
#If you have the properties file accessible via a web server
#use  http://myhost/properties/myPerfLog.properties
#Note: when using HTTP, ensure that the files do not contain
#any sensitive information and not accessible from outside your
#network. You may want to use an internal IP address that is accessible
#only to your application
#
#Using the above scheme you can easily change tunable properties easily
#during load and stress test without re-deploying your application.
#
#Additional implementation is also possible easily. The custom class need
#only implement org.perf.log.properties.TunableProperties interface
#For details review the source code and sample implementations
#############################################################################
#Uncomment next line to use the URLResourceTunablePropertiesImpl implementation to
#read the tunable properties dynamically and override the properties from properties file

static.logger.tunablePropertiesImplClass=org.perf.log.properties.URLResourceTunablePropertiesImpl
#Define the properties file as a URL resource. See examples below
static.logger.URLResourceTunablePropertiesImpl.URLResource=http://localhost/properties/perfLog/myTunedPerfLog.properties
#static.logger.URLResourceTunablePropertiesImpl.URLResource=file://somehost/properties/perfLog/myTunedPerfLog.properties
#static.logger.URLResourceTunablePropertiesImpl.URLResource=file:///properties/perfLog/myTunedPerfLog.properties
#static.logger.URLResourceTunablePropertiesImpl.URLResource=file:///c:\\apacheHTTP\\htdocs/properties\\myTunedPerfLog.properties

###############################################################
# End of Tunable properties implementation properties
###############################################################
